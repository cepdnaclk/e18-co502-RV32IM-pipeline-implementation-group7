$date
	Thu Apr 27 13:55:17 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 ! \regFile[0] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 " \regFile[1] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 # \regFile[2] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 $ \regFile[3] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 % \regFile[4] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 & \regFile[5] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 ' \regFile[6] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 ( \regFile[7] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 ) \regFile[8] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 * \regFile[9] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 + \regFile[10] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 , \regFile[11] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 - \regFile[12] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 . \regFile[13] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 / \regFile[14] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 0 \regFile[15] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 1 \regFile[16] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 2 \regFile[17] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 3 \regFile[18] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 4 \regFile[19] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 5 \regFile[20] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 6 \regFile[21] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 7 \regFile[22] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 8 \regFile[23] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 9 \regFile[24] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 : \regFile[25] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 ; \regFile[26] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 < \regFile[27] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 = \regFile[28] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 > \regFile[29] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 ? \regFile[30] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$scope module myregfile $end
$var reg 32 @ \regFile[31] [31:0] $end
$upscope $end
$upscope $end
$scope module reg_file_tb $end
$var wire 32 A OUT2 [31:0] $end
$var wire 32 B OUT1 [31:0] $end
$var reg 1 C CLK $end
$var reg 32 D IN [31:0] $end
$var reg 5 E INADDRESS [4:0] $end
$var reg 5 F OUT1ADDRESS [4:0] $end
$var reg 5 G OUT2ADDRESS [4:0] $end
$var reg 1 H RESET $end
$var reg 1 I WRITE $end
$scope module myregfile $end
$var wire 1 C CLK $end
$var wire 32 J IN [31:0] $end
$var wire 5 K INADDRESS [4:0] $end
$var wire 5 L OUT1ADDRESS [4:0] $end
$var wire 5 M OUT2ADDRESS [4:0] $end
$var wire 1 H RESET $end
$var wire 1 I WRITE $end
$var reg 32 N OUT1 [31:0] $end
$var reg 32 O OUT2 [31:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 P
bx O
bx N
bx M
bx L
bx K
bx J
0I
0H
bx G
bx F
bx E
bx D
0C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
1H
#5
1C
#7
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
b100000 P
#10
0C
#12
